/******************************************************************************
  This modules reads the 8 aux analog channels available on the Au in a loop
  and updates the output signal. First it waits for the conversion signal to 
  go up, then in the READ_NEXT state it waits for the drdy signal to be up, 
  stores the value in a dff array and increment the address.
  
  The vp/vn analog channel is not used.
*/


module analog (
    input clk,  // clock
    input rst,  // reset
    input vp0,
    input vn0,
    input vp1,
    input vn1,
    input vp2,
    input vn2,
    input vp3,
    input vn3,
    input vp4,
    input vn4,
    input vp5,
    input vn5,
    input vp6,
    input vn6,
    input vp7,
    input vn7,
    input vp,
    input vn,
    output signals[8][16]
  ) {
  
  // addresses of vauxp4/vauxp4, vauxp12/vauxp12, vauxp5/vauxp5, 
  // vauxp13/vauxp13, vauxp6/vauxp6, vauxp14/vauxp14, vauxp7/vauxp7, 
  // vauxp15/vauxp15
  // see Xilinx XADC documentation
  const ADDR = {6h14, 6h1c, 6h15, 6h1d, 6h16, 6h1e, 6h17, 6h1f};
  const NUM_AI = 8;
  
  .clk(clk){ 
 
    fsm state = {IDLE, READ_NEXT};
  
    .rst(rst) {
      dff sigs[NUM_AI][16];
      dff counter[3];
  }}
  
  xadc_wiz_0 xadc;
  
  always {
    xadc.vp_in = vp;
    xadc.vn_in = vn;
    xadc.vauxp4 = vp0;
    xadc.vauxn4 = vn0;
    xadc.vauxp12 = vp1;
    xadc.vauxn12 = vn1;
    xadc.vauxp5 = vp2;
    xadc.vauxn5 = vn2;
    xadc.vauxp13 = vp3;
    xadc.vauxn13 = vn3;
    xadc.vauxp6 = vp4;
    xadc.vauxn6 = vn4;
    xadc.vauxp14 = vp5;
    xadc.vauxn14 = vn5;
    xadc.vauxp7 = vp6;
    xadc.vauxn7 = vn6;
    xadc.vauxp15 = vp7;
    xadc.vauxn15 = vn7;
    
    xadc.dclk_in = clk;
    xadc.den_in = xadc.eoc_out; // read the register when the conversion is done
    xadc.di_in = 0; 
    xadc.dwe_in = 0; // only perform reads
    
    xadc.daddr_in = ADDR[NUM_AI-1-counter.q]; // use array to hold address
    
    case (state.q) {
      state.IDLE:
          if(xadc.eoc_out){
            state.d = state.READ_NEXT;
            counter.d = 0; // restart counter
          }
     
      state.READ_NEXT:
          if(xadc.drdy_out){ // if ready to be read
            sigs.d[counter.q] = xadc.do_out; // read signal
            counter.d = counter.q+1; // increase counter
          }
        
          if(&counter.q){ // if all addresses read, return to IDLE state
            state.d = state.IDLE;  
          }
    }
    
    signals = sigs.q;
  }
}
