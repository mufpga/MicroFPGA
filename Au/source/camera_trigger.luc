/******************************************************************************
   This module generates two TTL signals intended at triggering a camera and 
   lasers. The camera trigger output can be used directly to trigger a camera,
   while the laser trigger output can be processed by a laser_trigger module.
   
   It takes several parameters:
   * start: the output signals are only generated when start is HIGH, they are 
           0 otherwise.
   * trigger_pulse: pulse length of the camera trigger signal.
   * trigger_period: pulse period of the camera trigger signal.
   * trigger_exposure: pulse length of the laser trigger signal.
      
   Outputs:
   * trigger_camera: camera trigger signal.
   * trigger_lasers: laser trigger signal, intended to be fed to a laser_trigger
                     module.
   
   Example: 
               <-------------period------------>
               <-pulse->
               ---------                        ---------      high    
              |         |                      |         |
   camera -----         ------------------------         ----- low
   
               <---------exposure--------->
               ----------------------------     -------------- high
              |                           |     |        
   laser  -----                            -----               low
   
   Written by Joran Deschamps, EMBL (2021)
   https://mufpga.github.io/ 
   GPL-3.0 License  
*/
module camera_trigger (
    input clk,  // clock
    input rst,  // reset
    input start,
    input trigger_pulse[16], // pulse length of the camera trigger
    input trigger_period[16], // period of the camera trigger
    input trigger_exposure[16], // exposure of a camera frame (for the lasers)
    input trigger_delay[16], // delay for the laser exposure
    output trigger_camera,
    output trigger_lasers
  ) {

  // 16 bits -> maximum of 6.5s with NM_CYCLES = 10000
  const NM_CYCLES = 10000; // convert to NM_CYCLES*1e-8 = ~100 us
  const DELAY_CYCLES = 100; // ~1 us
  var pulse_cycle;
  var period_cycle;
  var exposure_cycle;
  var delay_cycle;
  
  .clk(clk){ 
    .rst(rst) {
      // If x is the number of bits of trigger_length/trigger_delay/exposure
      // i.e. Nbits(trigger_length) = x
      // Then, we must have Nbits(counter) > log2((2^x-1)*NM_CYCLES+1)
      // For x=16 and NM_CYCLES = 10000, it yields Nbits(counter) > 29.3
      dff counter[30]; // cycles counter
      dff delay_counter[30]; // delay counter
    }
  }
  
  always {
    pulse_cycle = trigger_pulse*NM_CYCLES;
    period_cycle = trigger_period*NM_CYCLES;
    exposure_cycle = trigger_exposure*NM_CYCLES;
    delay_cycle = trigger_delay*DELAY_CYCLES;
    
    // increase counters until they max out
    if (!&counter.q){ 
      counter.d = counter.q + 1;
    }
    if (!&delay_counter.q){ 
      delay_counter.d = delay_counter.q + 1;
    }
    
    // reset counters every period
    if (counter.q >= period_cycle && start){
      counter.d = 0;
      delay_counter.d = 0;
    }
    
    // set output signals
    trigger_camera = counter.q < pulse_cycle;
    trigger_lasers = delay_counter.q > delay_cycle && counter.q < exposure_cycle;    
  }
}
